import static Versions.daggerVersion

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools:r8:3.3.28'
        classpath 'com.android.tools.build:gradle:7.4.0-alpha02'
        classpath 'com.google.gms:google-services:4.3.10'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21"
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.1'
        classpath 'com.google.firebase:perf-plugin:1.4.1'
        classpath "com.google.dagger:hilt-android-gradle-plugin:$daggerVersion"
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.diffplug.spotless' version '6.6.1'
    id 'io.gitlab.arturbosch.detekt' version '1.20.0'
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
}

subprojects {
    repositories {
        google()
        mavenCentral()
    }

    apply from: rootProject.file('detekt.gradle')
    apply plugin: 'com.diffplug.spotless'

    spotless {
        kotlin {
            target '**/*.kt'
            ktlint("0.41.0")
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        kotlinGradle {
            target '*.gradle.kts'
            indentWithSpaces()
            trimTrailingWhitespace()
            endWithNewline()
            ktlint()
        }
        format 'xml', {
            target '**/*.xml'
            indentWithSpaces()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    tasks.withType(Test) {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }
}

task mockitoExtensions {
    doFirst {
        rootProject.subprojects.each {
            def path = "${it.projectDir}/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker"
            def mockMakerFile = new File(path)
            mockMakerFile.parentFile.mkdirs()
            mockMakerFile.createNewFile()
            mockMakerFile.write("mock-maker-inline")
        }
    }
}

task('test').dependsOn mockitoExtensions
